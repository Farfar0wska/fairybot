import os
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, MessageHandler, Filters

TOKEN = '8066144176:AAGDSb9GtVzGLtDE20a4GW8QX2xTO0isAAc' 

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå Telegram TOKEN is not set in environment variables")

bot = Bot(token=TOKEN)
app = Flask(__name__)

def reduce_to_single_digit(number):
    while number > 9:
        number = sum(int(d) for d in str(number))
    return number

def generate_response(n):
    messages = {
        1: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 1. –õ–∏–¥–µ—Ä. –°–∏–ª–∞ –≤–æ–ª–∏, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å.",
        2: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 2. –î–∏–ø–ª–æ–º–∞—Ç. –ì–∞—Ä–º–æ–Ω–∏—è, –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ.",
        3: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 3. –¢–≤–æ—Ä–µ—Ü. –†–∞–¥–æ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å.",
        4: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 4. –ü—Ä–∞–∫—Ç–∏–∫. –ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.",
        5: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 5. –ò—Å–∫–∞—Ç–µ–ª—å. –°–≤–æ–±–æ–¥–∞, –ø–µ—Ä–µ–º–µ–Ω—ã.",
        6: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 6. –•—Ä–∞–Ω–∏—Ç–µ–ª—å. –õ—é–±–æ–≤—å, —Å–µ–º—å—è.",
        7: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 7. –ú—É–¥—Ä–µ—Ü. –ò–Ω—Ç—É–∏—Ü–∏—è, –∞–Ω–∞–ª–∏–∑.",
        8: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 8. –°—Ç—Ä–∞—Ç–µ–≥. –°–∏–ª–∞, –≤–ª–∞—Å—Ç—å.",
        9: "üî¢ –í–∞—à–µ —á–∏—Å–ª–æ ‚Äî 9. –ì—É–º–∞–Ω–∏—Å—Ç. –°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, –º—É–¥—Ä–æ—Å—Ç—å.",
    }
    return messages.get(n, "–û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —á–∏—Å–ª–∞.")

def handle_message(update: Update, context):
    text = update.message.text
    digits = [int(ch) for ch in text if ch.isdigit()]
    if not digits:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 13 04 1995")
        return
    total = sum(digits)
    result = reduce_to_single_digit(total)
    update.message.reply_text(generate_response(result))

@app.route('/webhook', methods=['POST'])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

dispatcher = Dispatcher(bot, None, workers=0)
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)



